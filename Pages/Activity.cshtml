@page "/activities/{activityID}"
@inject HttpClient Http
@using Models
@using Constants

@functions {
  [Parameter]
  string activityID { get; set; }

  private Models.Activity activity { get; set; }

  protected override async Task OnInitAsync()
  {
    activity = await Http.GetJsonAsync<Models.Activity>(RouteConstants.apiActivities + activityID);
  }

  protected async Task LikeActivity() {
    //TODO: Separation of concerns
    activity.Likes++;
    await Http.PutJsonAsync<Models.Activity>(RouteConstants.apiActivities + activityID, activity);
  }

  protected async Task DislikeActivity() {
    //TODO: Separation of concerns
    activity.Dislikes++;
    await Http.PutJsonAsync<Models.Activity>(RouteConstants.apiActivities + activityID, activity);
  }
}

@if (activity == null)
{
  <div>Loading...</div>
}
else 
{
  <div class="activity">
    <div
      class="inner_activity_wrapper"
    >
    <img
      src="@(RouteConstants.base64image + activity.Image)"
      class="activity_image"
    />
    </div>
    <h2>
      @activity.Title
    </h2>
    <p>
      @activity.Description
    </p>
    <div class="likes_dislikes">
      <button class="likes" onclick=@(async () => await LikeActivity())>
        Like <img src="./images/thumbs_up.png" height="20px" width="20px" />
      </button>
      <button class="dislikes" onclick=@(async () => await DislikeActivity())>
        Dislike <img src="./images/thumbs_down.png" height="20px" width="20px" />
      </button>
    </div>
  </div>
}